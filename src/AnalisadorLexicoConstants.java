/* Generated By:JavaCC: Do not edit this line. AnalisadorLexicoConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorLexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int BEGIN = 9;
  /** RegularExpression Id. */
  int DEFINE = 10;
  /** RegularExpression Id. */
  int START = 11;
  /** RegularExpression Id. */
  int END = 12;
  /** RegularExpression Id. */
  int SET = 13;
  /** RegularExpression Id. */
  int READ = 14;
  /** RegularExpression Id. */
  int SHOW = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int THEN = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int LOOP = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int NUM = 21;
  /** RegularExpression Id. */
  int REAL = 22;
  /** RegularExpression Id. */
  int TEXT = 23;
  /** RegularExpression Id. */
  int FLAG = 24;
  /** RegularExpression Id. */
  int TRUE = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int IDENTIFIER = 27;
  /** RegularExpression Id. */
  int LETRA = 28;
  /** RegularExpression Id. */
  int DIGITO = 29;
  /** RegularExpression Id. */
  int CONST_REAL = 30;
  /** RegularExpression Id. */
  int CONST_INT = 31;
  /** RegularExpression Id. */
  int CONST_LITERAL = 32;
  /** RegularExpression Id. */
  int ERRO_LITERAL = 33;
  /** RegularExpression Id. */
  int OP_POW = 34;
  /** RegularExpression Id. */
  int OP_RESTO_DIV = 35;
  /** RegularExpression Id. */
  int OP_MENOR_IGUAL = 36;
  /** RegularExpression Id. */
  int OP_MAIOR_IGUAL = 37;
  /** RegularExpression Id. */
  int OP_IGUAL = 38;
  /** RegularExpression Id. */
  int OP_DIF = 39;
  /** RegularExpression Id. */
  int OP_MENOR = 40;
  /** RegularExpression Id. */
  int OP_MAIOR = 41;
  /** RegularExpression Id. */
  int ASSIGNMENT = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int LPAREN = 45;
  /** RegularExpression Id. */
  int RPAREN = 46;
  /** RegularExpression Id. */
  int LBRACKET = 47;
  /** RegularExpression Id. */
  int RBRACKET = 48;
  /** RegularExpression Id. */
  int LBRACE = 49;
  /** RegularExpression Id. */
  int RBRACE = 50;
  /** RegularExpression Id. */
  int OP_SOMA = 51;
  /** RegularExpression Id. */
  int OP_SUB = 52;
  /** RegularExpression Id. */
  int OP_MULT = 53;
  /** RegularExpression Id. */
  int OP_DIV = 54;
  /** RegularExpression Id. */
  int OP_MOD = 55;
  /** RegularExpression Id. */
  int OP_E = 56;
  /** RegularExpression Id. */
  int OP_OU = 57;
  /** RegularExpression Id. */
  int OP_NAO = 58;
  /** RegularExpression Id. */
  int ERRO_LEXICO = 59;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"begin\"",
    "\"define\"",
    "\"start\"",
    "\"end\"",
    "\"set\"",
    "\"read\"",
    "\"show\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"loop\"",
    "\"while\"",
    "\"num\"",
    "\"real\"",
    "\"text\"",
    "\"flag\"",
    "\"true\"",
    "\"false\"",
    "<IDENTIFIER>",
    "<LETRA>",
    "<DIGITO>",
    "<CONST_REAL>",
    "<CONST_INT>",
    "<CONST_LITERAL>",
    "<ERRO_LITERAL>",
    "\"**\"",
    "\"%%\"",
    "\"<<=\"",
    "\">>=\"",
    "\"==\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"=\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<ERRO_LEXICO>",
  };

}
