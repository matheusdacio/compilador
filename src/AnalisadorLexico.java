/* Generated By:JavaCC: Do not edit this line. AnalisadorLexico.java */
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class AnalisadorLexico implements AnalisadorLexicoConstants {
    // Usando List sem generics para compatibilidade
    private List errosSintaticos = new ArrayList();

    public List getErrosSintaticos() {
        return errosSintaticos;
    }

    public static void main(String args[]) {
        try {
            AnalisadorLexico parser = new AnalisadorLexico(new FileInputStream(args[0]));
            parser.programa();

            if (parser.getErrosSintaticos().isEmpty()) {
                System.out.println("Programa compilado com sucesso!");
            } else {
                System.out.println("Erros de compila\u00e7\u00e3o encontrados:");
                // Iterando sobre a lista raw
                for (int i = 0; i < parser.getErrosSintaticos().size(); i++) {
                    System.out.println(parser.getErrosSintaticos().get(i));
                }
            }

        } catch (FileNotFoundException e) {
            System.err.println("Arquivo n\u00e3o encontrado.");
        } catch (TokenMgrError e) {
            System.err.println("ERRO L\u00c9XICO: " + e.getMessage());
        } catch (ParseException e) {
             Token t = e.currentToken.next;
             String erro = String.format("ERRO SINT\u00c1TICO na Linha: %d, Coluna: %d. Encontrado: '%s'.",
                                          t.beginLine, t.beginColumn, t.image);
             System.err.println(erro);
        }
    }

    void adicionarErro(Token t, String mensagem) {
        String erro = String.format("ERRO SINT\u00c1TICO na Linha: %d, Coluna: %d. Encontrado: '%s'. Esperado: %s",
                                     t.beginLine, t.beginColumn, t.image, mensagem);
        errosSintaticos.add(erro);
    }

  final public void programa() throws ParseException {
    try {
      jj_consume_token(BEGIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        jj_consume_token(DEFINE);
        declaracoes_variaveis();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(START);
      lista_comandos();
      jj_consume_token(END);
      jj_consume_token(DOT);
      jj_consume_token(0);
    } catch (ParseException e) {
                                                                                                                                                                    adicionarErro(e.currentToken.next, "uma estrutura de programa v\u00e1lida."); while (getToken(1).kind != EOF) { getNextToken(); }
    }
  }

  final public void declaracoes_variaveis() throws ParseException {
    label_1:
    while (true) {
      declaracao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
  }

  final public void declaracao() throws ParseException {
    try {
      lista_identificadores();
      tipo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        valor();
        jj_consume_token(SEMICOLON);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        jj_consume_token(CONST_INT);
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          jj_consume_token(LBRACE);
          lista_valores();
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                                                                                                                                                                                                                                          adicionarErro(e.currentToken.next, "uma declara\u00e7\u00e3o de vari\u00e1vel v\u00e1lida."); while (getToken(1).kind != SEMICOLON && getToken(1).kind != START && getToken(1).kind != EOF) { getNextToken(); } if(getToken(1).kind == SEMICOLON) getNextToken();
    }
  }

  final public void lista_identificadores() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case TEXT:
      jj_consume_token(TEXT);
      break;
    case FLAG:
      jj_consume_token(FLAG);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void lista_valores() throws ParseException {
    valor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      valor();
    }
  }

  final public void lista_comandos() throws ParseException {
    label_4:
    while (true) {
      comando();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET:
      case READ:
      case SHOW:
      case IF:
      case LOOP:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
    }
  }

  final public void comando() throws ParseException {
    try {
      if (jj_2_1(2)) {
        comando_atribuicao();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case READ:
          comando_entrada();
          break;
        case SHOW:
          comando_saida();
          break;
        case IF:
          comando_selecao();
          break;
        case LOOP:
          comando_repeticao();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
                                                                                                                                                                           adicionarErro(e.currentToken.next, "um comando v\u00e1lido (set, read, show, if, loop)."); while (getToken(1).kind != SEMICOLON && getToken(1).kind != END && getToken(1).kind != EOF) { getNextToken(); } if(getToken(1).kind == SEMICOLON) getNextToken();
    }
  }

  final public void comando_atribuicao() throws ParseException {
    jj_consume_token(SET);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expressao();
      jj_consume_token(SEMICOLON);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expressao();
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      expressao();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comando_entrada() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expressao();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void comando_saida() throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(LPAREN);
    item_saida();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      item_saida();
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void item_saida() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expressao();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comando_selecao() throws ParseException {
    jj_consume_token(IF);
    expressao();
    jj_consume_token(THEN);
    lista_comandos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      lista_comandos();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

  final public void comando_repeticao() throws ParseException {
    jj_consume_token(LOOP);
    jj_consume_token(WHILE);
    expressao();
    lista_comandos();
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

  final public void expressao() throws ParseException {
    expressao_logica();
  }

  final public void expressao_logica() throws ParseException {
    termo_logico();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOGIC_OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(OP_LOGIC_OR);
      termo_logico();
    }
  }

  final public void termo_logico() throws ParseException {
    fator_logico();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOGIC_AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      jj_consume_token(OP_LOGIC_AND);
      fator_logico();
    }
  }

  final public void fator_logico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_LOGIC_NOT:
      jj_consume_token(OP_LOGIC_NOT);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    expressao_relacional();
  }

  final public void expressao_relacional() throws ParseException {
    expressao_aritmetica();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_REL_LTLT_EQ:
    case OP_REL_GTGT_EQ:
    case OP_REL_EQ:
    case OP_REL_NEQ:
    case OP_REL_LTLT:
    case OP_REL_GTGT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_REL_EQ:
        jj_consume_token(OP_REL_EQ);
        break;
      case OP_REL_NEQ:
        jj_consume_token(OP_REL_NEQ);
        break;
      case OP_REL_LTLT:
        jj_consume_token(OP_REL_LTLT);
        break;
      case OP_REL_GTGT:
        jj_consume_token(OP_REL_GTGT);
        break;
      case OP_REL_LTLT_EQ:
        jj_consume_token(OP_REL_LTLT_EQ);
        break;
      case OP_REL_GTGT_EQ:
        jj_consume_token(OP_REL_GTGT_EQ);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expressao_aritmetica();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void expressao_aritmetica() throws ParseException {
    termo_aritmetico();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ARIT_SUM:
      case OP_ARIT_SUB:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ARIT_SUM:
        jj_consume_token(OP_ARIT_SUM);
        break;
      case OP_ARIT_SUB:
        jj_consume_token(OP_ARIT_SUB);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo_aritmetico();
    }
  }

  final public void termo_aritmetico() throws ParseException {
    fator_aritmetico();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ARIT_DIVINT:
      case OP_ARIT_MUL:
      case OP_ARIT_DIV:
      case OP_ARIT_MOD:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ARIT_MUL:
        jj_consume_token(OP_ARIT_MUL);
        break;
      case OP_ARIT_DIV:
        jj_consume_token(OP_ARIT_DIV);
        break;
      case OP_ARIT_MOD:
        jj_consume_token(OP_ARIT_MOD);
        break;
      case OP_ARIT_DIVINT:
        jj_consume_token(OP_ARIT_DIVINT);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fator_aritmetico();
    }
  }

  final public void fator_aritmetico() throws ParseException {
    elemento();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ARIT_POW:
      jj_consume_token(OP_ARIT_POW);
      fator_aritmetico();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void elemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        expressao();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expressao();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AnalisadorLexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x100,0x10000000,0x0,0x0,0x0,0x780000,0x1800000,0x0,0x27800,0x27000,0x0,0x0,0x0,0x0,0x10000000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x800000,0x11800000,0x2000000,0x0,0x38,0x2000000,0x0,0x0,0x10800000,0x10000000,0x2000000,0x10000000,0x38,0x0,0x200000,0x100000,0x400000,0x1f80,0x1f80,0x18000,0x18000,0xe4000,0xe4000,0x2000,0x10000000,0x4000038,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AnalisadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalisadorLexico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AnalisadorLexico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AnalisadorLexico(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
