/* Generated By:JavaCC: Do not edit this line. AnalisadorLexico.java */
import java.io.*;

public class AnalisadorLexico implements AnalisadorLexicoConstants {

    private ErrorHandler errorHandler;

    public AnalisadorLexico(Reader stream, ErrorHandler handler) {
        this(stream);
        this.errorHandler = handler;
    }

    public static void main(String args[]) throws TokenMgrError, FileNotFoundException, ParseException {
        try {
            if (args.length == 0) {
                System.err.println("Uso: java AnalisadorLexico <arquivo-fonte>");
                return;
            }
            ErrorHandler consoleHandler = new ErrorHandler();
            Reader reader = new InputStreamReader(new FileInputStream(args[0]));
            AnalisadorLexico parser = new AnalisadorLexico(reader, consoleHandler);
            System.out.println("=== Iniciando an\u00e1lise l\u00e9xica e sint\u00e1tica ===");
            parser.programa();
            if (consoleHandler.hasErrors()) {
                System.out.println("\n=== Erros encontrados: ===");
                for (String error : consoleHandler.getErrorMessages()) {
                    System.err.println("- " + error);
                }
            } else {
                System.out.println("\n=== An\u00e1lise conclu\u00edda com sucesso ===");
            }
        } catch (FileNotFoundException e) {
            System.err.println("Arquivo n\u00e3o encontrado: " + e.getMessage());
        } catch (TokenMgrError e) {
            System.err.println("ERRO L\u00c9XICO FATAL: " + e.getMessage());
        }
    }

// =======================================================
// PRODUÇÕES SINTÁTICAS
// =======================================================
  final public void programa() throws ParseException {
    try {
      jj_consume_token(BEGIN);
      inicio();
      definicao();
      jj_consume_token(START);
      comandos();
      jj_consume_token(END);
      jj_consume_token(DOT);
    } catch (ParseException e) {
        if (errorHandler != null) {
            errorHandler.processParseException(e, "na estrutura principal do programa");
        }
    }
  }

  final public void inicio() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  final public void definicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
      jj_consume_token(DEFINE);
      try {
        lista_dv();
      } catch (ParseException e) {
            if (errorHandler != null) {
                errorHandler.processParseException(e, "na se\u00e7\u00e3o de declara\u00e7\u00f5es");
            }
            while (true) {
                Token t = getToken(1);
                if (t.kind == START || t.kind == EOF) {
                    break;
                }
                getNextToken();
            }
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

/*
 * Uma lista de declarações de variáveis consiste em UMA OU MAIS
 * ocorrências de (declaracao_variaveis seguida por um ponto e vírgula).
 */
  final public void lista_dv() throws ParseException {
    label_1:
    while (true) {
      declaracao_variaveis();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
  }

/* declaracao_variaveis NÃO contém ; */
  final public void declaracao_variaveis() throws ParseException {
    lista_identificadores();
    jj_consume_token(COLON);
    tipo();
    declaracao_variaveis_opcional();
  }

/* opcional (mesma sua definição) */
  final public void declaracao_variaveis_opcional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      valor();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      jj_consume_token(CONST_INT);
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        jj_consume_token(LBRACE);
        lista_valores();
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void lista_identificadores() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

  final public void lista_valores() throws ParseException {
    valor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      valor();
    }
  }

  final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case TEXT:
      jj_consume_token(TEXT);
      break;
    case FLAG:
      jj_consume_token(FLAG);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// -------------------------------------------------------
// Comandos
// -------------------------------------------------------
  final public void comandos() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SET:
      case READ:
      case SHOW:
      case IF:
      case LOOP:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      try {
        comando();
      } catch (ParseException e) {
            if (errorHandler != null) {
                errorHandler.processParseException(e, "em um comando");
            }
            while (true) {
                Token t = getToken(1);
                if (t.kind == SEMICOLON || t.kind == END || t.kind == EOF) {
                    if (t.kind == SEMICOLON) getNextToken();
                    break;
                }
                getNextToken();
            }
      }
    }
  }

// ... (resto das regras de comando e expressão) ...
  final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SET:
      comando_atribuicao();
      break;
    case READ:
      comando_entrada();
      break;
    case SHOW:
      comando_saida();
      break;
    case IF:
      comando_selecao();
      break;
    case LOOP:
      comando_repeticao();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comando_atribuicao() throws ParseException {
    jj_consume_token(SET);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expressao();
      jj_consume_token(SEMICOLON);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expressao();
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      expressao();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comando_entrada() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      expressao();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void comando_saida() throws ParseException {
    jj_consume_token(SHOW);
    jj_consume_token(LPAREN);
    lista_elementos_saida();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void lista_elementos_saida() throws ParseException {
    elemento_saida();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      elemento_saida();
    }
  }

  final public void elemento_saida() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comando_selecao() throws ParseException {
    jj_consume_token(IF);
    expressao();
    jj_consume_token(THEN);
    comandos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      comandos();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

  final public void comando_repeticao() throws ParseException {
    jj_consume_token(LOOP);
    jj_consume_token(WHILE);
    expressao();
    comandos();
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

  final public void expressao() throws ParseException {
    expressao_arit_log();
    expressao2();
  }

  final public void expressao2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_REL_LTLT_EQ:
    case OP_REL_GTGT_EQ:
    case OP_REL_EQ:
    case OP_REL_NEQ:
    case OP_REL_LTLT:
    case OP_REL_GTGT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_REL_EQ:
        jj_consume_token(OP_REL_EQ);
        break;
      case OP_REL_NEQ:
        jj_consume_token(OP_REL_NEQ);
        break;
      case OP_REL_LTLT:
        jj_consume_token(OP_REL_LTLT);
        break;
      case OP_REL_GTGT:
        jj_consume_token(OP_REL_GTGT);
        break;
      case OP_REL_LTLT_EQ:
        jj_consume_token(OP_REL_LTLT_EQ);
        break;
      case OP_REL_GTGT_EQ:
        jj_consume_token(OP_REL_GTGT_EQ);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expressao_arit_log();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void expressao_arit_log() throws ParseException {
    termo2();
    menor_prioridade();
  }

  final public void menor_prioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ARIT_SUM:
    case OP_ARIT_SUB:
    case OP_LOGIC_OR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ARIT_SUM:
        jj_consume_token(OP_ARIT_SUM);
        break;
      case OP_ARIT_SUB:
        jj_consume_token(OP_ARIT_SUB);
        break;
      case OP_LOGIC_OR:
        jj_consume_token(OP_LOGIC_OR);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo2();
      menor_prioridade();
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  final public void termo2() throws ParseException {
    termo1();
    media_prioridade();
  }

  final public void media_prioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ARIT_DIVINT:
    case OP_ARIT_MUL:
    case OP_ARIT_DIV:
    case OP_ARIT_MOD:
    case OP_LOGIC_AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ARIT_MUL:
        jj_consume_token(OP_ARIT_MUL);
        break;
      case OP_ARIT_DIV:
        jj_consume_token(OP_ARIT_DIV);
        break;
      case OP_ARIT_MOD:
        jj_consume_token(OP_ARIT_MOD);
        break;
      case OP_ARIT_DIVINT:
        jj_consume_token(OP_ARIT_DIVINT);
        break;
      case OP_LOGIC_AND:
        jj_consume_token(OP_LOGIC_AND);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo1();
      media_prioridade();
      break;
    default:
      jj_la1[21] = jj_gen;

    }
  }

  final public void termo1() throws ParseException {
    elemento();
    maior_prioridade();
  }

  final public void maior_prioridade() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OP_ARIT_POW:
      jj_consume_token(OP_ARIT_POW);
      elemento();
      maior_prioridade();
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  final public void elemento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case CONST_INT:
      jj_consume_token(CONST_INT);
      break;
    case CONST_REAL:
      jj_consume_token(CONST_REAL);
      break;
    case CONST_LITERAL:
      jj_consume_token(CONST_LITERAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      expressao();
      jj_consume_token(RPAREN);
      break;
    case OP_LOGIC_NOT:
      jj_consume_token(OP_LOGIC_NOT);
      jj_consume_token(LPAREN);
      expressao();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public AnalisadorLexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x780000,0xf800000,0x27800,0x27800,0x0,0x0,0x0,0xe000000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x0,0x8,0x400000,0x8400000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x8400000,0x8000000,0x1000000,0x8,0x0,0xfc0,0xfc0,0x10c000,0x10c000,0xf2000,0xf2000,0x1000,0x2200008,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AnalisadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalisadorLexico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalisadorLexico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalisadorLexico(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
