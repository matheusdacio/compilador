options {
    STATIC = false; // Permite instanciar o analisador como objeto
}

PARSER_BEGIN(AnalisadorLexico)

import java.io.*;
public class AnalisadorLexico {
    public static void main(String args[]) throws ParseException, TokenMgrError, FileNotFoundException {
        try {
            AnalisadorLexico parser = new AnalisadorLexico(new FileInputStream(args[0]));
            Token t;
            do {
                t = parser.getNextToken();
                System.out.printf("Lexema: %s, Linha: %d, Coluna: %d, Categoria: %s, Código: %d%n",
                                   t.image, t.beginLine, t.beginColumn, t.kind, t.kind);
            } while (t.kind != EOF);
        } catch (FileNotFoundException e) {
            System.err.println("Arquivo não encontrado.");
        }
    }
}

PARSER_END(AnalisadorLexico)

// ------------------------
// Espaços em branco
// ------------------------
SKIP : {
    " " | "\t" | "\n" | "\r"
}

// ------------------------
// Comentários
// ------------------------
SKIP : {
    <LINE_COMMENT: "//" (~["\n", "\r"])* >
    |
    "/*" : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "*/" : DEFAULT
    |
    < ~[] >
}

// ------------------------
// Palavras reservadas do compilador
// ------------------------
TOKEN : {
    <BEGIN: "begin">
    | <DEFINE: "define">
    | <START: "start">
    | <END: "end">
    | <SET: "set">
    | <READ: "read">
    | <SHOW: "show">
    | <IF: "if">
    | <THEN: "then">
    | <ELSE: "else">
    | <LOOP: "loop">
    | <WHILE: "while">
    | <NUM: "num">
    | <REAL: "real">
    | <TEXT: "text">
    | <FLAG: "flag">
    | <TRUE: "true">
    | <FALSE: "false">
}

// ------------------------
// Identificadores
// ------------------------
TOKEN : {
    <IDENTIFIER: (<LETRA> | "_")(<DIGITO>(<LETRA> | "_")|(<LETRA> | "_")*)*>
    | <#LETRA: ["a"-"z", "A"-"Z"]>
    | <#DIGITO: ["0"-"9"]>
}


// ------------------------
// Constantes (SINTAXE CORRIGIDA)
// ------------------------
TOKEN : {
    <CONST_REAL: <DIGITO>(<DIGITO>)* "." <DIGITO>(<DIGITO>)*>
  | <CONST_INT:  <DIGITO>(<DIGITO>)* >
  | <CONST_LITERAL: "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
  | <ERRO_LITERAL: "\"" (~["\"", "\n", "\r"])* | "'" (~["'", "\n", "\r"])* >
}

// ------------------------
// Símbolos especiais
// (agrupados por categoria e com operadores longos primeiro)
// ------------------------
TOKEN : {
    // Operadores Relacionais
    < OP_RELACIONAL: "<<=" | ">>=" | "==" | "!=" | "<<" | ">>" >
    |
    // Operadores Aritméticos
    < OP_ARITMETICO: "**" | "%%" | "%" | "+" | "-" | "*" | "/" >
    |
    // Operadores Lógicos
    < OP_LOGICO: "&" | "|" | "!" >
    |
    // Símbolos Especiais
    < SIMBOLO_ESPECIAL: "=" | ";" | "," | "[" | "]" | "." >
}

// ------------------------
// Erros léxicos (MOVIDO PARA O FINAL DO ARQUIVO)
// Esta DEVE ser a última regra de TOKEN.
// ------------------------
TOKEN : {
    <ERRO_LEXICO: ~[] >
}